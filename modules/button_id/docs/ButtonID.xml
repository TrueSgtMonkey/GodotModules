<?xml version="1.0" encoding="utf-8"?>
<class name="AI" category="Modules">
    <brief_description>
        Adds functions and properties that are needed for most enemies.
    </brief_description>
    <description>
        Functions and properties that help the AI find the target they are after. The AI will randomly move in 8 different directions while idle and check for the player based on an idle timer.
    </description>
    <methods>
        <method name="checkForPlayer">
            <argument index="0" name="sprite" type="Object">
            </argument>
            <argument index="1" name="result" type="Dictionary">
            </argument>
            <argument index="2" name="direction_timer" type="Object">
            </argument>
            <argument index="3" name="animation_timer" type="Object">
            </argument>
            <description>
                [b]Args[/b]: 
                sprite : [u]Sprite3D[/u] -> need to pass in to rotate the AI correctly for Sprites.
                result : [u]Dictionary[/u] -> needs to be the result of a rayShot().
                direction_timer : [u]AniTimer[/u] -> the time it takes for the AI to turn around while idle.
                animation_timer : [u]AniTimer[/u] -> needed for the frame information for SpriteRotater::idleTurn() function.
                [b]Description[/b]:
                First, checks if the dir_timer passed in exists and its time is up (it is frameReady based on the AniTimer class). If that is true, then moves the AI in one of 8 directions (which is why the ani_timer is needed), before checking if the result passed in is good and if startIdle is false. If the enemy is not set to startIdle and the result is good, then the AI will search for a target. If the result collided with the target, then this function will return true. Otherwise, this function returns false if none of these requirements are met.
                [b]Usage[/b]:
                [codeblock]
                # just a simple example
                var target : Spatial 
                var dir_timer := AniTimer.new()
                var ani_timer := AniTimer.new()

                func _ready():
                    target = get_target() #will retrieve the target such as a player
                    dir_timer.wait_time = 1.0
                    ani_timer.wait_time = 0.1 #10 fps
                    add_child(dir_timer)
                    add_child(ani_timer)

                func _physics_process(delta):
                    var result = rayShot(global_transform.origin, target.global_transform.origin, [self])

                    # other code...

                    # target not found if false
                    if checkForPlayer($SomeSprite, result, dir_timer, ani_timer):
                        chase_target()
                        
                func get_target():
                    return Globals.target_ref # from singleton
                    
                func chase_target():
                    print("Chasing target")
                    #other chase code...
                [/codeblock]
            </description>
        </method>
        <method name="rayShot">
            <argument index="0" name="vec1" type="Vector3">
            </argument>
            <argument index="1" name="vec2" type="Vector3">
            </argument>
            <argument index="2" name="vecExclude" type="Array">
            </argument>
            <description>
                Checks the space_state of the world and then shoots a ray from vec1 to vec2. If the ray collides with anything between those two places, then a dictionary will return with:
                "position" - The Vector3 position in which there was an intersection.
                "normal" - The Vector3 of the normal (the "bounce" between the ray and the surface).
                "collider_id" - The colliding body's unique RID.
                "collider" - The colliding body Node or Scene.
                "shape" - The shape index of the collider.
                "rid" - The intersecting object's RID.
                If there is no collision, then the function returns an empty dictionary. Will be seen as null by Godot I believe.
            </description>
        </method>
        <method name="setHorizontalVelocity">
            <argument index="0" name="vel" type="Vector3">
            </argument>
            <description>
                Sets the x and z axes of the velocity property of this class.
            </description>
        </method>
        <method name="followScentTrail">
            <argument index="0" name="vec3s" type="Array">
            </argument>
            <description>
                Shoots ray shots to an array of Vector3s (one for each vector). This can be very expensive if used for a large array. Returns an empty dictionary if nothing is collided with. Meant for the scent Algorithm.
            </description>
        </method>
    </methods>
    <members>
        <member name="row" type="int" setter="setRow" getter="getRow" brief="">
            The amount of h_frames the main sprite of the class has
        </member>
        <member name="velocity" type="Vector3" setter="setVelocity" getter="getVelocity" brief="">
            Determines the speed and direction of movement
        </member>
        <member name="rd" type="int" setter="setRandDistribution" getter="getRandDistribution" brief="">
            The denominator for the max chance of random turning. rc/rd
        </member>
        <member name="rc" type="int" setter="setRandChance" getter="getRandChance" brief="">
            The numerator for the max chance of random turning. rc/rd
        </member>
        <member name="sightDist" type="float" setter="setSightDist" getter="getSightDist" brief="">
            How far the AI can see when checking for target.
        </member>
        <member name="walking" type="bool" setter="setWalking" getter="getWalking" brief="">
            Determines if the AI is walking or not. Commonly needed across most AI.
        </member>
        <member name="startIdle" type="bool" setter="setStartIdle" getter="getStartIdle" brief="">
            If true, the AI will not attack the target unless damaged.
        </member>
        <member name="playerGroup" type="String" setter="setPlayerGroup" getter="getPlayerGroup" brief="">
            The target group of the AI. By default looks for Player.
        </member>
        <member name="scentGroup" type="String" setter="setScentGroup" getter="getScentGroup" brief="">
            What group the AI looks for while chasing the target. Meant for the scent Algorithm.
        </member>
    </members>
    <constants>
    </constants>
</class>